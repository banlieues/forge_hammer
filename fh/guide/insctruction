-----Convention de nommage des fichiers--------

Régle générale: tout fichier d'un package doit être préfixé par :
S'il s'agit d'une classe, Fh
S'il s'agit d'un script, fh

1. Le nom du package doit être en minuscule et être préfixé par fh_ (exemple: fh_dao)
2. La librairie principale du package doit porter le nom du package, première lettre en majuscule (exemple: Fh_dao)
3. Une view doit être nommée en minuscule, préfixé par fhv_dao_nom de la view (exemple: fhv_dao_select
4. Le model doit être nommé première lettre en majuscule, même nom que la librairie mais on rajoute un m après le Fh, exemple Fhm_dao
5. Les js dans la mesure du possible doivent être regroupé dans un seul fichier qui se nomme nom du package suivi de js, par exeple fh_dao_js

Exemple de structure
    fh_dao
	->libraries
		->Fh_dao.php
	->models
		->Fhm_dao.php
	->views
		->fh_dao_js.php
		->fhv_dao_select.php

---- Toute librairie doit avoir la structure de base suivante ------
    
class Fh_myclass {
    
   
    private $tpken_js="xxxxxxxxx";

    public function __construct($params= array()) {

	if (count($params) > 0): $this->initialize($params); endif; 
	$this->CI =& get_instance();

    }


    private function initialize($params = array())
    {
	if (count($params) > 0):
	
	    foreach ($params as $key => $val):
		if (isset($this->$key)):
		    $this->$key = $val;
		endif;
	    endforeach;
	endif;
    }

    private function params()
    {
	
	    $params=array();
	    $params["token_js"]=$this->token_js;
	   …………
	    
	    return $params;
	

    }

-----Convention js----------

    Afin d'éviter, tout conflit de js - var token_js="998jfoej39393". 
    1. Chaque élement, attribut, id, class propre à un package doit être préfixé d'un token propre à un package
    2. Ce token est configuré par les params de la librairie, un token par défaut doit être prévu
    3. Le token doit être transmis au view et utilisé par celle-ci pour préfixé les attributs, class et id propre au package
    4. Le token doit être transmis au js pour préfixé les class, attribut et id propre ua package
    5. Si un package est utilisé dans des contextes différents, il faut attribué un token à chaque contexte